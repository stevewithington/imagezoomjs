!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("zoom",[],n):"object"==typeof exports?exports.zoom=n():t.zoom=n()}(window,(function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}({"./node_modules/tslib/tslib.es6.js":function(t,n,e){"use strict";e.r(n),e.d(n,"__extends",(function(){return o})),e.d(n,"__assign",(function(){return a})),e.d(n,"__rest",(function(){return i})),e.d(n,"__decorate",(function(){return s})),e.d(n,"__param",(function(){return u})),e.d(n,"__metadata",(function(){return c})),e.d(n,"__awaiter",(function(){return l})),e.d(n,"__generator",(function(){return f})),e.d(n,"__createBinding",(function(){return m})),e.d(n,"__exportStar",(function(){return p})),e.d(n,"__values",(function(){return d})),e.d(n,"__read",(function(){return _})),e.d(n,"__spread",(function(){return v})),e.d(n,"__spreadArrays",(function(){return y})),e.d(n,"__await",(function(){return g})),e.d(n,"__asyncGenerator",(function(){return h})),e.d(n,"__asyncDelegator",(function(){return b})),e.d(n,"__asyncValues",(function(){return S})),e.d(n,"__makeTemplateObject",(function(){return x})),e.d(n,"__importStar",(function(){return O})),e.d(n,"__importDefault",(function(){return P})),e.d(n,"__classPrivateFieldGet",(function(){return j})),e.d(n,"__classPrivateFieldSet",(function(){return Y}));var r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function o(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}var a=function(){return(a=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)};function i(t,n){var e={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&n.indexOf(r)<0&&(e[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(e[r[o]]=t[r[o]])}return e}function s(t,n,e,r){var o,a=arguments.length,i=a<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,n,e,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(i=(a<3?o(i):a>3?o(n,e,i):o(n,e))||i);return a>3&&i&&Object.defineProperty(n,e,i),i}function u(t,n){return function(e,r){n(e,r,t)}}function c(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}function l(t,n,e,r){return new(e||(e=Promise))((function(o,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function s(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(i,s)}u((r=r.apply(t,n||[])).next())}))}function f(t,n){var e,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(t,i)}catch(t){a=[6,t],r=0}finally{e=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var m=Object.create?function(t,n,e,r){void 0===r&&(r=e),Object.defineProperty(t,r,{enumerable:!0,get:function(){return n[e]}})}:function(t,n,e,r){void 0===r&&(r=e),t[r]=n[e]};function p(t,n){for(var e in t)"default"===e||n.hasOwnProperty(e)||m(n,t,e)}function d(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,a=e.call(t),i=[];try{for(;(void 0===n||n-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=a.return)&&e.call(a)}finally{if(o)throw o.error}}return i}function v(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(_(arguments[n]));return t}function y(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var a=arguments[n],i=0,s=a.length;i<s;i++,o++)r[o]=a[i];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function h(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),a=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){a.push([t,n,e,r])>1||s(t,n)}))})}function s(t,n){try{(e=o[t](n)).value instanceof g?Promise.resolve(e.value.v).then(u,c):l(a[0][2],e)}catch(t){l(a[0][3],t)}var e}function u(t){s("next",t)}function c(t){s("throw",t)}function l(t,n){t(n),a.shift(),a.length&&s(a[0][0],a[0][1])}}function b(t){var n,e;return n={},r("next"),r("throw",(function(t){throw t})),r("return"),n[Symbol.iterator]=function(){return this},n;function r(r,o){n[r]=t[r]?function(n){return(e=!e)?{value:g(t[r](n)),done:"return"===r}:o?o(n):n}:o}}function S(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=d(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){(function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)})(r,o,(n=t[e](n)).done,n.value)}))}}}function x(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}var w=Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n};function O(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.hasOwnProperty.call(t,e)&&m(n,t,e);return w(n,t),n}function P(t){return t&&t.__esModule?t:{default:t}}function j(t,n){if(!n.has(t))throw new TypeError("attempted to get private field on non-instance");return n.get(t)}function Y(t,n,e){if(!n.has(t))throw new TypeError("attempted to set private field on non-instance");return n.set(t,e),e}},"./src/ImageZoom.ts":function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./node_modules/tslib/tslib.es6.js"),o=function(t,n){var e=this;void 0===n&&(n={}),this.defaults={minScale:1,maxScale:10,speed:10},this._initState=function(){return{element:e._element,minScale:e._options.minScale,maxScale:e._options.maxScale,speed:e._options.speed,transformation:{originX:0,originY:0,translateX:0,translateY:0,scale:1},bounds:e._element.getBoundingClientRect()}},this._initInstance=function(){return Object.assign({},e.canZoom(e._state),e.canPan(e._state))},this._initEvents=function(){if(e._options.zoomInElement){var t,n=e._options.zoomInElement;e.on(n,"click",(function(){e.zoomIn()})),e.on(n,"mousedown",(function(){t=setInterval((function(){e.zoomIn()}),20)})),e.on(n,"mouseup",(function(){clearInterval(t)}))}var r;e._options.zoomOutElement&&(n=e._options.zoomOutElement,e.on(n,"click",(function(){e.zoomOut()})),e.on(n,"mousedown",(function(){r=setInterval((function(){e.zoomOut()}),20)})),e.on(n,"mouseup",(function(){clearInterval(r)})));if(e._options.rangeElement){var o=e._options.rangeElement;o.min=e._options.minScale.toString(),o.max=e._options.maxScale.toString(),o.step=(.001*e._options.speed).toString(),o.defaultValue=o.min,e.on(o,"input",(function(){var t=Number(o.value),n=t>e._state.transformation.scale?1:-1;e._zoom(n,t)}))}e.on(e._element,"dblclick",(function(){e._instance.panTo({originX:0,originY:0,scale:1}),e._originPoint={x:0,y:0},e._options.rangeElement&&(e._options.rangeElement.value="0")})),e.on(e._element,"wheel",(function(t){t.preventDefault(),e._instance.zoom({deltaScale:Math.sign(t.deltaY)>0?-1:1,x:t.pageX,y:t.pageY})})),e.on(e._element,"mousemove",(function(t){t.shiftKey&&(t.preventDefault(),e._instance.panBy({originX:t.movementX,originY:t.movementY}))}))},this.zoomIn=function(){var t=e._state.transformation.scale+1/e._options.speed;e._zoom(1,t)},this.zoomOut=function(){var t=e._state.transformation.scale+-1/e._options.speed;e._zoom(-1,t)},this.canZoom=function(t){return{zoom:function(n){var o=n.x,a=n.y,i=n.deltaScale,s=t.element.getBoundingClientRect(),u=s.left,c=s.top,l=t.minScale,f=t.maxScale,m=t.speed,p=r.__read(e.getScale({scale:t.transformation.scale,deltaScale:i,minScale:l,maxScale:f,speed:m}),2),d=p[0],_=p[1],v=o-u,y=a-c,g=v/d,h=y/d,b=e.getTranslate({scale:d,minScale:l,maxScale:f}),S=b({pos:v,prevPos:t.transformation.originX,translate:t.transformation.translateX}),x=b({pos:y,prevPos:t.transformation.originY,translate:t.transformation.translateY});t.element.style.transformOrigin=0===g&&0===h?"center":g+"px "+h+"px",t.element.style.transform=e.getMatrix({scale:_,translateX:S,translateY:x}),t.transformation={originX:g,originY:h,translateX:S,translateY:x,scale:_},t.bounds=t.element.getBoundingClientRect();var w=t.element.style.transformOrigin.split(" ");w.forEach((function(t,n,e){var r=t.replace("px","");e[n]=Number(r)})),e._originPoint={x:w[0],y:w[1]},e._updateRangeValue()}}},this.pan=function(t){var n=t.state,r=t.originX,o=t.originY;n.transformation.translateX+=r,n.transformation.translateY+=o,n.element.style.transform=e.getMatrix({scale:n.transformation.scale,translateX:n.transformation.translateX,translateY:n.transformation.translateY})},this.canPan=function(t){return{panBy:function(n){var r=n.originX,o=n.originY;return e.pan({state:t,originX:r,originY:o})},panTo:function(n){var r=n.originX,o=n.originY,a=n.scale;t.transformation.scale=a,e.pan({state:t,originX:r-t.transformation.translateX,originY:o-t.transformation.translateY})}}},this.getMatrix=function(t){var n=t.scale;return"matrix("+n+", 0, 0, "+n+", "+t.translateX+", "+t.translateY+")"},this.getScale=function(t){var n=t.scale,r=t.minScale,o=t.maxScale,a=t.speed,i=n+t.deltaScale/(a/n);return i=Math.max(r,Math.min(i,o)),[e._round(n),e._round(i)]},this.valueInRange=function(t){var n=t.minScale,e=t.maxScale,r=t.scale;return r<=e&&r>=n},this.hasPositionChanged=function(t){return t.pos!==t.prevPos},this.getTranslate=function(t){var n=t.minScale,r=t.maxScale,o=t.scale;return function(t){var a=t.pos,i=t.prevPos,s=t.translate;return e.valueInRange({minScale:n,maxScale:r,scale:o})&&e.hasPositionChanged({pos:a,prevPos:i})?(s+(a-i)*o)*(0/o):s}},this.on=function(t,n,e,r){return void 0===r&&(r=!1),t.addEventListener(n,e,r),function(){t.removeEventListener(n,e,r)}},this._zoom=function(t,n){void 0===n&&(n=1),n=n<e._options.minScale?e._options.minScale:n>e._options.maxScale?e._options.maxScale:n;var o=e._state,a=o.minScale,i=o.maxScale,s=o.speed,u=r.__read(e.getScale({scale:n,deltaScale:t,minScale:a,maxScale:i,speed:s}),2),c=u[0],l=(u[1],e._originPoint.x),f=e._originPoint.y,m=e.getTranslate({scale:c,minScale:a,maxScale:i}),p=m({pos:l,prevPos:e._state.transformation.originX,translate:e._state.transformation.translateX}),d=m({pos:f,prevPos:e._state.transformation.originY,translate:e._state.transformation.translateY});e._state.element.style.transformOrigin=0===l&&0===f?"center":l+"px "+f+"px",e._state.element.style.transform=e.getMatrix({scale:c,translateX:p,translateY:d}),e._state.transformation={originX:l,originY:f,translateX:p,translateY:d,scale:n},e._updateRangeValue()},this._updateRangeValue=function(){if(e._options.rangeElement){var t=e._options.rangeElement,n=e._round(e._state.transformation.scale).toString();t.value!==n&&(t.value=n)}},this._round=function(t,n){return void 0===n&&(n=2),Number(Math.round(+(t+"e"+n))+"e-"+n)},this._element=t,this._options=r.__assign(r.__assign({},this.defaults),n),this._originPoint={x:0,y:0},this._state=this._initState(),this._instance=this._initInstance(),this._initEvents()};n.default=o},"./src/index.ts":function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./node_modules/tslib/tslib.es6.js").__importDefault(e("./src/ImageZoom.ts"));window.ImageZoom=r.default,n.default=r.default},0:function(t,n,e){t.exports=e("./src/index.ts")}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,